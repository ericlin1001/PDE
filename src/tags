!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	pde.cpp	25;"	d	file:
CR	pde.cpp	/^		double F,CR;\/\/algorithm related parameters.$/;"	m	class:DE	file:
DE	pde.cpp	/^class DE{$/;"	c	file:
DEBUG	pde.cpp	14;"	d	file:
DefFunction	pde.cpp	177;"	d	file:
EndDef	pde.cpp	181;"	d	file:
F	pde.cpp	/^		double F,CR;\/\/algorithm related parameters.$/;"	m	class:DE	file:
Function	pde.cpp	/^		Function(const char *s,double xlow,double xup,double fbest,bool isFindMin,int numDim){$/;"	f	class:Function
Function	pde.cpp	/^class Function{$/;"	c	file:
FunctionFactory	pde.cpp	/^		FunctionFactory(int numDim){$/;"	f	class:FunctionFactory	file:
FunctionFactory	pde.cpp	/^class FunctionFactory{$/;"	c	file:
Instance	pde.cpp	/^		static FunctionFactory &Instance(int numDim){$/;"	f	class:FunctionFactory
MATH_EXP	pde.cpp	23;"	d	file:
MATH_PI	pde.cpp	22;"	d	file:
MAX_BUFFER	pde.cpp	21;"	d	file:
MAX_FUNCTION_NAME	pde.cpp	123;"	d	file:
NormD	pde.cpp	/^inline double NormD(double u,double t){$/;"	f
OMPI_IMPORTS	pde.cpp	17;"	d	file:
PDE	pde.cpp	/^int PDE(int processId,int numProcess,Function*f,vector<double>&bestX,double &bestF){$/;"	f
RandomPermutation	pde.cpp	/^		RandomPermutation(int tn):n(tn),i(0){$/;"	f	class:RandomPermutation
RandomPermutation	pde.cpp	/^class RandomPermutation{$/;"	c	file:
Tagg	pde.cpp	/^void Tagg(const char *str){$/;"	f
Test	pde.cpp	26;"	d	file:
Tic	pde.cpp	/^		Tic(){}$/;"	f	class:Tic	file:
Tic	pde.cpp	/^class Tic{$/;"	c	file:
Trace	pde.cpp	24;"	d	file:
add	pde.cpp	/^		void add(const vector<double>&XF){$/;"	f	class:DE
algorithm	pde.cpp	/^		int algorithm;$/;"	m	class:DE	file:
begin	pde.cpp	/^		void begin(Function* f){$/;"	f	class:DE
bestI	pde.cpp	/^		int bestI;$/;"	m	class:DE	file:
calBestI	pde.cpp	/^		void calBestI(){$/;"	f	class:DE
calStatistics	pde.cpp	/^void calStatistics(const vector<double>&arr,double &min,double &max,double &mean,double &std){$/;"	f
del	pde.cpp	/^		vector<double>del(int i){$/;"	f	class:DE
drand	pde.cpp	/^double drand(){$/;"	f
drand	pde.cpp	/^double drand(double min,double max){$/;"	f
dtic	pde.cpp	/^		inline static double dtic(){$/;"	f	class:Tic
f	pde.cpp	/^		Function *f;$/;"	m	class:DE	file:
f	pde.cpp	/^		inline double f(const vector<double>&xs){$/;"	f	class:Function
fbest	pde.cpp	/^		double fbest;$/;"	m	class:Function	file:
feCounter	pde.cpp	/^		int feCounter;$/;"	m	class:Function	file:
fs	pde.cpp	/^		vector<Function*>fs;$/;"	m	class:FunctionFactory	file:
funName	pde.cpp	/^		char funName[MAX_FUNCTION_NAME];$/;"	m	class:Function	file:
fx	pde.cpp	/^		vector<double>fx;$/;"	m	class:DE	file:
gaussrand	pde.cpp	/^double gaussrand()$/;"	f
generate	pde.cpp	/^		void generate(){$/;"	f	class:RandomPermutation
getAlgorithmName	pde.cpp	/^		const char *getAlgorithmName(){$/;"	f	class:DE
getBest	pde.cpp	/^		double getBest()const{return fbest;}$/;"	f	class:Function
getFunction	pde.cpp	/^		Function*getFunction(int index)const{$/;"	f	class:FunctionFactory
getIsFindMin	pde.cpp	/^		bool getIsFindMin()const{return isFindMin;}$/;"	f	class:Function
getMeanF	pde.cpp	/^		double getMeanF()const{$/;"	f	class:DE
getName	pde.cpp	/^		const char *getName()const{return funName;}$/;"	f	class:Function
getNumDim	pde.cpp	/^		int getNumDim()const{return numDim;}$/;"	f	class:Function
getNumFunction	pde.cpp	/^		int getNumFunction()const{$/;"	f	class:FunctionFactory
getNumP	pde.cpp	/^		int getNumP()const{return numP;}$/;"	f	class:DE
getOutput	pde.cpp	/^		void getOutput(vector<double>&bestX,double &bestF){$/;"	f	class:DE
getRange	pde.cpp	/^		double getRange(int botOrUp){$/;"	f	class:Function
getShortName	pde.cpp	/^		const char *getShortName()const{return shortName;}$/;"	f	class:Function
getTimeMs	pde.cpp	/^		inline static long getTimeMs(){$/;"	f	class:Tic	file:
getfeCounter	pde.cpp	/^		int getfeCounter()const{return feCounter;}$/;"	f	class:Function
i	pde.cpp	/^	int i;$/;"	m	class:RandomPermutation	file:
init	pde.cpp	/^		void init(int algorithm,int numP){$/;"	f	class:DE
instance	pde.cpp	/^		static FunctionFactory*instance;$/;"	m	class:FunctionFactory	file:
instance	pde.cpp	/^FunctionFactory*FunctionFactory::instance=0;$/;"	m	class:FunctionFactory	file:
isFBetter	pde.cpp	/^		inline bool isFBetter(double a,double b){$/;"	f	class:Function
isFBetter	pde.cpp	/^		inline bool isFBetter(double fx1,double fx2){$/;"	f	class:DE
isFindMin	pde.cpp	/^		bool isFindMin;$/;"	m	class:DE	file:
isFindMin	pde.cpp	/^		bool isFindMin;$/;"	m	class:Function	file:
lastTime	pde.cpp	/^		static long lastTime;$/;"	m	class:Tic	file:
lastTime	pde.cpp	/^long Tic::lastTime=0;$/;"	m	class:Tic	file:
main	pde.cpp	/^int main(int argc,char *argv[]){$/;"	f
mtic	pde.cpp	/^		static long mtic(){$/;"	f	class:Tic
mul	pde.cpp	/^	double mul=1.0;$/;"	v
mulcos	pde.cpp	/^	double mulcos=1.0;$/;"	v
n	pde.cpp	/^	int n;$/;"	m	class:RandomPermutation	file:
next	pde.cpp	/^		int next(){$/;"	f	class:RandomPermutation
numDim	pde.cpp	/^		int numDim;$/;"	m	class:DE	file:
numDim	pde.cpp	/^		int numDim;$/;"	m	class:Function	file:
numP	pde.cpp	/^		int numP;$/;"	m	class:DE	file:
operator ()	pde.cpp	/^		virtual double operator()(const double *xs,int size){$/;"	f	class:Function
p	pde.cpp	/^	vector<int>p;$/;"	m	class:RandomPermutation	file:
popInit	pde.cpp	/^		void popInit(){$/;"	f	class:DE
printArr	pde.cpp	/^void printArr(int *arr,int size){$/;"	f
printVec	pde.cpp	/^void printVec(const vector<T>&arr){$/;"	f
res	pde.cpp	/^	double res=0.0;$/;"	v
res	pde.cpp	/^	double res=fabs(xs[0]);$/;"	v
runPDE	pde.cpp	/^vector<double> runPDE(int id,int idSize,Function*f,int maxRun){$/;"	f
runSerialDE	pde.cpp	/^vector<double> runSerialDE(DE &de,Function*f,int maxRun){$/;"	f
shortName	pde.cpp	/^		char shortName[50];$/;"	m	class:Function	file:
solve	pde.cpp	/^		void solve(Function* f,int maxGeneration,vector<double>&bestX,double &bestF){$/;"	f	class:DE
sum	pde.cpp	/^	double sum=0.0;$/;"	v
sumcosx	pde.cpp	/^	double sumcosx=0.0;$/;"	v
sumu	pde.cpp	/^	double sumu=0.0;$/;"	v
sumx	pde.cpp	/^	double sumx=0.0;$/;"	v
sumx2	pde.cpp	/^	double sumx2=0.0;$/;"	v
sumy	pde.cpp	/^	double sumy=0.0;$/;"	v
test	pde.cpp	/^		static void test(){$/;"	f	class:Tic
tic	pde.cpp	/^		static void tic(const char *tag="begin"){$/;"	f	class:Tic
tx	pde.cpp	/^		vector<double>tx;$/;"	m	class:DE	file:
u	pde.cpp	/^		static double u(double x,double a,double k,double m){$/;"	f	class:Function
unused_main	pde.cpp	/^int unused_main(int argc,char *argv[]){$/;"	f
update	pde.cpp	/^		void update(int maxGeneration){$/;"	f	class:DE
updateX	pde.cpp	/^		void updateX(){$/;"	f	class:DE
x	pde.cpp	/^		vector<vector<double> >x;\/\/x,trail x.$/;"	m	class:DE	file:
xd	pde.cpp	/^double xd=xs[size-1];$/;"	v
xlow	pde.cpp	/^		double xlow,xup;$/;"	m	class:Function	file:
xmax	pde.cpp	/^		double xmax;$/;"	m	class:DE	file:
xmin	pde.cpp	/^		double xmin;$/;"	m	class:DE	file:
xup	pde.cpp	/^		double xlow,xup;$/;"	m	class:Function	file:
y1	pde.cpp	/^	double y1=1.0+(xs[0]+1.0)\/4.0;$/;"	v
yd	pde.cpp	/^	double yd=1.0+(xs[size-1]+1.0)\/4.0;$/;"	v
yi	pde.cpp	/^	double yi,yi1;$/;"	v
yi1	pde.cpp	/^	double yi,yi1;$/;"	v
~FunctionFactory	pde.cpp	/^		~FunctionFactory(){$/;"	f	class:FunctionFactory
